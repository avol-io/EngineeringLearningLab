{"version":3,"sources":["../src/app/shared/services/proposal.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA,sCAA2C;AAE3C,0BAA4B;AAG5B,uEAAiE;AAGjE,IAAa,eAAe;IAIxB;QACI,IAAI,CAAC,YAAY,GAAG,0BAAS,CAAC;IAClC,CAAC;IAED,sCAAY,GAAZ,UAAa,QAA0B;QACnC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAED,yCAAe,GAAf,UAAgB,EAAU;QAEtB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,GAAG,CAAC,CAAa,UAAiB,EAAjB,KAAA,IAAI,CAAC,YAAY,EAAjB,cAAiB,EAAjB,IAAiB;YAA7B,IAAI,IAAI,SAAA;YACT,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBACZ,QAAQ,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC;SACJ;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,wCAAc,GAAd,UAAe,QAAkB;QAE7B,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,GAAG,CAAC,CAAa,UAAiB,EAAjB,KAAA,IAAI,CAAC,YAAY,EAAjB,cAAiB,EAAjB,IAAiB;YAA7B,IAAI,IAAI,SAAA;YACT,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAC;SACR;QACD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;QAE7C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,wCAAc,GAAd,UAAe,QAAkB;QAC7B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,wCAAc,GAAd,UAAe,QAAkB;QAE7B,GAAG,CAAC,CAAa,UAAiB,EAAjB,KAAA,IAAI,CAAC,YAAY,EAAjB,cAAiB,EAAjB,IAAiB;YAA7B,IAAI,IAAI,SAAA;YACT,OAAO,CAAC,GAAG,CAAC,OAAO,EAAC,IAAI,EAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC;YAClD,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;gBAC7B,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC;gBAClC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACzB,CAAC;SACR;QACD,OAAO,CAAC,GAAG,CAAC,UAAU,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE1C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEjC,kBAAkB;QAClB,+BAA+B;QAC/B,yCAAyC;QACzC,qCAAqC;QACrC,uDAAuD;QACvD,oDAAoD;QACpD,wDAAwD;QACxD,6DAA6D;QAC7D,uDAAuD;QACvD,gDAAgD;QAChD,YAAY;QACZ,IAAI;QACJ,wDAAwD;QAExD,oCAAoC;IACxC,CAAC;IAEL,sBAAC;AAAD,CA1EA,AA0EC,IAAA;AA1EY,eAAe;IAD3B,iBAAU,EAAE;;GACA,eAAe,CA0E3B;AA1EY,0CAAe","file":"proposal.service.js","sourcesContent":["import { ProposalCriteria } from './../models/proposal-criteria.model';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport * as _ from \"lodash\";\n\nimport { Proposal } from '../../shared/models/proposal.model';\nimport { PROPOSALS } from '../../proposal/shared/proposals-mock';\n\n@Injectable()\nexport class ProposalService {\n\n    proposalList: Proposal[];\n\n    constructor(){\n        this.proposalList = PROPOSALS;\n    }\n\n    getProposals(criteria: ProposalCriteria): Promise<Array<Proposal>> {\n        return Promise.resolve(this.proposalList);\n    }\n\n    getProposalById(id: number): Promise<Proposal> {\n\n        let proposal = null;\n        for (let prop of this.proposalList) {\n            console.log(JSON.stringify(prop)); \n            if (prop.id == id) {\n                    proposal = _.cloneDeep(prop);\n            }\n        }\n\n        return Promise.resolve(proposal);\n    }\n\n    updateProposal(proposal: Proposal): Promise<Proposal> {\n        \n        let index = -1;\n        for (let prop of this.proposalList) { \n            if (prop.id === proposal.id) {\n                    index = this.proposalList.indexOf(prop);\n                }\n        }\n        this.proposalList.splice(index, 1, proposal);\n\n        return Promise.resolve(proposal);\n    }\n\n    insertProposal(proposal: Proposal): Promise<Proposal> {\n        return null;\n    }\n\n    deleteProposal(proposal: Proposal): Promise<Proposal> {\n\n        for (let prop of this.proposalList) { \n            console.log('check',prop,prop.id === proposal.id);\n            if (prop.id === proposal.id) {\n                    prop.companyProfile = 'N.A.';\n                    prop.nationalWorkProfile = 'N.A.';\n                    prop.moneyProposal = 'N.A.';\n                    prop.motivation = '';\n                }\n        }\n        console.log('new List',this.proposalList);\n\n        return Promise.resolve(proposal);\n\n        // let index = -1;\n        // let promposalDeleted = null;\n        // for (let prop of this.proposalList) { \n        //     if (prop.id === proposal.id) {\n        //             index = this.proposalList.indexOf(prop);\n        //             promposalDeleted = _.cloneDeep(prop);\n        //             promposalDeleted.companyProfile = 'N.A.';\n        //             promposalDeleted.nationalWorkProfile = 'N.A.';\n        //             promposalDeleted.moneyProposal = 'N.A.';\n        //             promposalDeleted.motivation = '';\n        //         }\n        // }\n        // this.proposalList.splice(index, 1, promposalDeleted);\n\n        // return Promise.resolve(proposal);\n    }\n\n}"]}